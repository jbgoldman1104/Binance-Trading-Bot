// Code generated by mockery v2.20.0. DO NOT EDIT.

package mock

import (
	decimal "github.com/shopspring/decimal"
	entity "github.com/vadimInshakov/marti/entity"

	mock "github.com/stretchr/testify/mock"
)

// Detector is an autogenerated mock type for the Detector type
type Detector struct {
	mock.Mock
}

// LastAction provides a mock function with given fields:
func (_m *Detector) LastAction() entity.Action {
	ret := _m.Called()

	var r0 entity.Action
	if rf, ok := ret.Get(0).(func() entity.Action); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(entity.Action)
	}

	return r0
}

// NeedAction provides a mock function with given fields: price
func (_m *Detector) NeedAction(price decimal.Decimal) (entity.Action, error) {
	ret := _m.Called(price)

	var r0 entity.Action
	var r1 error
	if rf, ok := ret.Get(0).(func(decimal.Decimal) (entity.Action, error)); ok {
		return rf(price)
	}
	if rf, ok := ret.Get(0).(func(decimal.Decimal) entity.Action); ok {
		r0 = rf(price)
	} else {
		r0 = ret.Get(0).(entity.Action)
	}

	if rf, ok := ret.Get(1).(func(decimal.Decimal) error); ok {
		r1 = rf(price)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewDetector interface {
	mock.TestingT
	Cleanup(func())
}

// NewDetector creates a new instance of Detector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDetector(t mockConstructorTestingTNewDetector) *Detector {
	mock := &Detector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
